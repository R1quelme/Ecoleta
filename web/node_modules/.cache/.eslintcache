[{"D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\index.tsx":"1","D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\App.tsx":"2","D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\pages\\Home\\index.tsx":"3","D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\pages\\CreatePoint\\index.tsx":"4","D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\routes.tsx":"5","D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\services\\api.ts":"6","D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\components\\Dropzone\\index.tsx":"7"},{"size":198,"mtime":1618244592000,"results":"8","hashOfConfig":"9"},{"size":196,"mtime":1618244592000,"results":"10","hashOfConfig":"9"},{"size":922,"mtime":1618244592000,"results":"11","hashOfConfig":"9"},{"size":9703,"mtime":1618532914487,"results":"12","hashOfConfig":"9"},{"size":404,"mtime":1618244592000,"results":"13","hashOfConfig":"9"},{"size":116,"mtime":1618244592000,"results":"14","hashOfConfig":"9"},{"size":1072,"mtime":1618520978575,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1iff0qq",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\index.tsx",[],["32","33"],"D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\App.tsx",[],"D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\pages\\Home\\index.tsx",[],"D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\pages\\CreatePoint\\index.tsx",["34"],"import React, { useEffect, useState, ChangeEvent, FormEvent } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { FiArrowLeft } from 'react-icons/fi';\nimport { MapContainer, TileLayer, Marker } from 'react-leaflet';\nimport axios from 'axios';\nimport { LeafletMouseEvent } from 'leaflet';\nimport api from '../../services/api';\n\nimport Dropzone from '../../components/Dropzone';\n\nimport './styles.css';\n\nimport logo from '../../assets/logo.svg'\n\n//array ou objeto: manualmente informar o tipo da variavel\ninterface Item {\n    id: number;\n    title: string;\n    image_url: string;\n}\n\ninterface IBGEUFResponse {\n    sigla: string;\n}\n\ninterface IBGECityResponse {\n    nome: string;\n}\n\nconst CreatePoint = () => {\n    const [items, setItems] = useState<Item[]>([]);\n    const [ufs, setUfs] = useState<string[]>([])\n    const [cities, setCities] = useState<string[]>([]);\n\n    const [initialPosition, setInitialPosition] = useState<[number, number]>([0, 0]);\n\n    const [formData, setFormData] = useState({\n        name: '',\n        email: '',\n        whatsapp: '',\n    })\n\n    const [selectedUf, setSelectedUf] = useState('0');\n    const [selectedCity, setSelectedCity] = useState('0');\n    const [selectedItems, setSelectedItems] = useState<number[]>([]);\n    const [selectedPosition, setSelectedPosition] = useState<[number, number]>([0, 0]);\n    const [selectedFile, setSelectedFile] = useState<File>();\n\n    const history = useHistory();\n\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition(position => {\n            // console.log(position)\n            const { latitude, longitude } = position.coords;\n\n            setInitialPosition([latitude, longitude])\n        });\n    }, []);\n\n    useEffect(() => {\n        api.get('items').then(response => {\n            setItems(response.data);\n        });\n    }, []);\n\n    useEffect(() => {\n        axios.get<IBGEUFResponse[]>('https://servicodados.ibge.gov.br/api/v1/localidades/estados').then(response => {\n            const ufInitials = response.data.map(uf => uf.sigla)\n\n            setUfs(ufInitials);\n        });\n    }, []);\n\n    useEffect(() => {\n        //carregar as cidades sempre que a UF mandar\n        if (selectedUf === '0') {\n            return;\n        }\n\n        axios.get<IBGECityResponse[]>(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios`).then(response => {\n            const cityNames = response.data.map(city => city.nome)\n\n            setCities(cityNames);\n        });\n    }, [selectedUf]);\n\n    function handleSelectUF(event: ChangeEvent<HTMLSelectElement>) {\n        const uf = event.target.value;\n\n        setSelectedUf(uf);\n    }\n\n    function handleSelectCity(event: ChangeEvent<HTMLSelectElement>) {\n        const city = event.target.value;\n\n        setSelectedCity(city);\n    }\n\n    function handleMapClick(event: LeafletMouseEvent) {\n        setSelectedPosition([\n            event.latlng.lat,\n            event.latlng.lng,\n        ])\n    }\n\n    function handleImputChange(event: ChangeEvent<HTMLInputElement>) {\n        const { name, value } = event.target;\n\n        setFormData({ ...formData, [name]: value })\n    }\n\n    function handleSelectItem(id: number) {\n        const alreadySelected = selectedItems.findIndex(item => item === id);\n\n        if (alreadySelected >= 0) {\n            const filteredItems = selectedItems.filter(item => item !== id);\n\n            setSelectedItems(filteredItems);\n        } else {\n            setSelectedItems([...selectedItems, id])\n        }\n    }\n\n    async function handleSubmit(event: FormEvent) {\n        event.preventDefault();\n\n        const { name, email, whatsapp } = formData;\n        const uf = selectedUf;\n        const city = selectedCity;\n        const [latitude, longitude] = selectedPosition;\n        const items = selectedItems;\n\n        const data = new FormData();\n\n        data.append('name', name);\n        data.append('email', email);\n        data.append('whatsapp', whatsapp);\n        data.append('uf', uf);\n        data.append('city', city);\n        data.append('latitude', String(latitude));\n        data.append('longitude', String(longitude));\n        data.append('items', items.join(','));\n\n        if (selectedFile) {\n            data.append('image', selectedFile)\n        }\n\n        await api.post('points', data)\n\n        alert('Ponto de coleta criado')\n\n        history.push('/')\n    }\n\n    // const ionClick = () => {\n    //     const map = useMapEvent('click', () => {\n    //         return <> (\n    //             <TileLayer\n    //                 attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n    //                 url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    //             />\n    //             <Marker position={selectedPosition} />\n    //         </>\n    //     })\n    // }\n\n    return (\n        <div id=\"page-create-point\">\n            <header>\n                <img src={logo} alt=\"Ecoleta\" />\n\n                <Link to=\"/\">\n                    <FiArrowLeft />\n                    Voltar para home\n                </Link>\n            </header>\n\n            <form onSubmit={handleSubmit}>\n                <h1> Cadastro do <br /> ponto de coleta</h1>\n\n                <Dropzone onFileUploaded={setSelectedFile} />\n\n                <fieldset>\n                    <legend>\n                        <h2>Dados</h2>\n                    </legend>\n\n                    <div className=\"field\">\n                        <label htmlFor=\"name\">Nome da entidade</label>\n                        <input\n                            type=\"text\"\n                            name=\"name\"\n                            id=\"name\"\n                            onChange={handleImputChange}\n                        />\n                    </div>\n                    <div className=\"field\">\n                        <label htmlFor=\"name\">E-mail</label>\n                        <input\n                            type=\"email\"\n                            name=\"email\"\n                            id=\"email\"\n                            onChange={handleImputChange}\n\n                        />\n                    </div>\n                    <div className=\"field\">\n                        <label htmlFor=\"name\">Whatsapp</label>\n                        <input\n                            type=\"text\"\n                            name=\"whatsapp\"\n                            id=\"whatsapp\"\n                            onChange={handleImputChange}\n                        />\n                    </div>\n                </fieldset>\n\n                <fieldset>\n                    <legend>\n                        <h2>Endereço</h2>\n                        <span>Selecione o endereço no mapa</span>\n                    </legend>\n\n                    <MapContainer center={initialPosition} zoom={15}>\n                    {/* onclick={handleMapClick} */}\n                        <TileLayer\n                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        />\n\n                        <Marker position={selectedPosition} />\n                    </MapContainer>\n\n                    <div className=\"field-group\">\n                        <div className=\"field\">\n                            <label htmlFor=\"uf\">Estado (UF)</label>\n                            <select\n                                name=\"uf\"\n                                id=\"uf\"\n                                value={selectedUf}\n                                onChange={handleSelectUF}\n                            >\n                                <option value=\"0\">Selecione uma UF</option>\n                                {ufs.map(uf => (\n                                    <option key={uf} value={uf}>{uf}</option>\n                                ))}\n                            </select>\n                        </div>\n                        <div className=\"field\">\n                            <label htmlFor=\"city\">Cidade</label>\n                            <select\n                                name=\"city\"\n                                id=\"city\"\n                                value={selectedCity}\n                                onChange={handleSelectCity}\n                            >\n                                <option value=\"0\">Selecione uma cidade</option>\n                                {cities.map(city => (\n                                    <option key={city} value={city}>{city}</option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                </fieldset>\n\n                <fieldset>\n                    <legend>\n                        <h2>Itens de coleta</h2>\n                        <span>Selecione um ou mais itens abaixo</span>\n                    </legend>\n\n                    <ul className=\"items-grid\">\n                        {items.map(item => (\n                            <li key={item.id}\n                                onClick={() => handleSelectItem(item.id)}\n                                className={selectedItems.includes(item.id) ? 'selected' : ''}\n                            >\n                                <img src={item.image_url} alt={item.title} />\n                                <span>{item.title}</span>\n                            </li>))}\n                    </ul>\n                </fieldset>\n\n                <button type=\"submit\">\n                    Cadastrar ponto de coleta\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default CreatePoint;","D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\routes.tsx",[],"D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\services\\api.ts",[],"D:\\Users\\mathe\\Desktop\\Cursos\\nlw1\\web\\src\\components\\Dropzone\\index.tsx",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":99,"column":14,"nodeType":"41","messageId":"42","endLine":99,"endColumn":28},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"@typescript-eslint/no-unused-vars","'handleMapClick' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]